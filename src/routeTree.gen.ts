/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiOrpcSplatRouteImport } from './routes/api/orpc.$'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth.$'

const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiOrpcSplatRoute = ApiOrpcSplatRouteImport.update({
  id: '/api/orpc/$',
  path: '/api/orpc/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/orpc/$': typeof ApiOrpcSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/orpc/$': typeof ApiOrpcSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/orpc/$': typeof ApiOrpcSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/sign-in' | '/sign-up' | '/api/auth/$' | '/api/orpc/$'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/sign-in' | '/sign-up' | '/api/auth/$' | '/api/orpc/$'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/sign-in'
    | '/sign-up'
    | '/api/auth/$'
    | '/api/orpc/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRoute
  SignInRoute: typeof SignInRoute
  SignUpRoute: typeof SignUpRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiOrpcSplatRoute: typeof ApiOrpcSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/orpc/$': {
      id: '/api/orpc/$'
      path: '/api/orpc/$'
      fullPath: '/api/orpc/$'
      preLoaderRoute: typeof ApiOrpcSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRoute,
  SignInRoute: SignInRoute,
  SignUpRoute: SignUpRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiOrpcSplatRoute: ApiOrpcSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
